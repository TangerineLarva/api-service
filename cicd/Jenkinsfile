def label = "${UUID.randomUUID().toString()}"

/* -------- functions ---------- */
def notifySlack(STATUS, COLOR) {
/*
	slackSend (color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
*/
}

def emailRecipients="happycloudpak@gmail.com"
def notifyMail(STATUS, RECIPIENTS) {
/*
	emailext body: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})",
	subject: STATUS + " : " + "${env.JOB_NAME} [${env.BUILD_NUMBER}]",
	from: "happycloudpak@gmail.com",
	to: RECIPIENTS
*/
}

/* ------------------------------ */

notifySlack("STARTED", "#FFFF00")
notifyMail("STARTED", "${emailRecipients}")

//node(label) {
node {
    String stageName = ""
    
    stageName = "Get Source"	
    stage(stageName) {
        echo "**** START : " + stageName
        
        git url: "https://github.com/happykube/api-service.git", branch: "main"
        // git url: "https://github.com/devJacob01/springcloud.git", branch: "master", credentialsId: "auth_gitlab"	
    }

    //-- 환경변수 파일 읽어서 변수값 셋팅
    def props = readProperties  file:"./cicd/pipeline.properties"  

    def imageRegistry = props["imageResgistry"]
    def imageOrganization = props["imageOrganization"]
    def imageRepository = props["imageRepository"]
    def imageTag = props["imageTag"]

    def dockerRegistry = props["dockerRegistry"]
    def credentialRegistry=props["credentialRegistry"]
    
    def baseDir = props["baseDir"]
    def baseDeployDir = props["baseDeployDir"]
    def skipStages = props["skipStages"]
    
    def sonarQubeURL = props["sonarQubeURL"]
    def sonarQubeLogin = props["sonarQubeLogin"]
    def sonarQubeProject = props["sonarQubeProject"]
    
    // tag를 재정의 함. 이미지 버전이 달라야 배포시 컨테이너에서 인식
    def timeStamp = System.currentTimeMillis()
    echo "TimeStamp: ${timeStamp}"
    echo "Tag : ${imageTag}"
    tag = imageTag+"-"+timeStamp
    echo "New Tag : ${tag}"
    
    try {
        stageName = "Inspection Code"
        stage(stageName) {
            echo "**** START : " + stageName
            if("${skipStages}".contains(stageName)) {
                echo "Skipped: " + stageName
            } else {
                script {
                    dir("${env.WORKSPACE}/${baseDir}"){  // change directory
                        sh ("pwd")
                        sh ("mvn sonar:sonar \
                            -Dsonar.projectKey=${icpSonarQubeProject}  \
                            -Dsonar.projectName=${icpSonarQubeProject} \
                            -Dsonar.host.url=${icpSonarQubeURL} \
                            -Dsonar.login=${icpSonarQubeLogin}")
                    }
                }				
            }
        }

        stageName = "Get CI/CD files"
        stage(stageName) {
            script {
                sh "cd ${env.WORKSPACE}"
                sh "if [ -f ${env.WORKSPACE}/run-cicd/cmd/run-cicd ]; then rm -rf run-cicd; fi"
                sh "git clone https://github.com/happykube/run-cicd.git"
            }
        }

        stageName = "Build"
        stage(stageName) {
            echo "**** START : " + stageName           
            script {                
                sh "cd ${env.WORKSPACE}/${baseDir}"
                sh "${env.WORKSPACE}/run-cicd/cmd/build-image happycloudpak happy@cloud . java ${env.WORKSPACE}/run-cicd"
            }
        }

        stageName = "Copy CI/CD Scripts to bastion"
        stage(stageName) {
            script {
                sh "ls -al ${env.WORKSPACE}"
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "bastion",  //Jenkins 시스템 정보에 사전 입력한 서버 ID
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    execCommand: "mkdir -p ~/cicd/${imageRepository}"
                                ), 
                                sshTransfer(
                                    sourceFiles: "${env.WORKSPACE}/README.md", //전송할 파일
                                    removePrefix: "", //파일에서 삭제할 경로가 있다면 작성
                                    remoteDirectory: "~/cicd/${imageRepository}",     //배포할 위치
                                    execCommand: "ls -al ~/cicd/${imageRepository}"  //원격지에서 실행할 커맨드
                                )
                            ]
                        )
                    ]
                )
            }
        }
   

        /*
        stageName = "Deploy to Cluster"
        stage( stageName ) {
            script {
                echo "**** Deploy START : " + stageName
                
                sh "kubectl apply -n ${namespace} -f ${baseDir}${baseDeployDir}/${deployment}"
                sh "kubectl set image deployment ${appname} ${containername}=${image}:${tag} -n ${namespace}"					
            }
        }
        */
        
        echo "**** FINISH ALL STAGES : SUCESS"
                    
        notifySlack("${currentBuild.currentResult}", "#00FF00")
        notifyMail("${currentBuild.currentResult}", "${emailRecipients}")
    } catch(e) {
        currentBuild.result = "FAILED"
        notifySlack("${currentBuild.currentResult}", "#FF0000")
        notifyMail("${currentBuild.currentResult}", "${emailRecipients}")			
    }
}